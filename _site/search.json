[
  {
    "objectID": "posts/soon/index.html",
    "href": "posts/soon/index.html",
    "title": "Coming soon!!!",
    "section": "",
    "text": "Bloggy things coming soon!!! 😱\nThank you for visiting!\n\n2+2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Dec 👋",
    "section": "",
    "text": "I’m Declan. I’m a modeller - I work with numbers, mostly in actuarial departments. 📊\nI also develop calculang, with a mission to democratise numbers. A life project and still a baby 🌱\nThis website is under construction 🚧\nI made this it to share my thoughts about modelling (“calcs”) and stuff. Don’t treat it like professional work or advice.\nIf you want my professional work or advice, send me a hello by electronic mail to: declann1990@gmail.com 🙂"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog with Dec 📝",
    "section": "",
    "text": "Coming soon!!!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 17, 2023\n\n\nDeclan Naughton\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tools/index.html",
    "href": "tools/index.html",
    "title": "Tools with Dec 🔨",
    "section": "",
    "text": "Tooling is an important motivation to separate concerns in the way that a language for calculations proposes.\n\nHere is a place where I’ll put some of the tools I’ve been able to hammer together.\nIf you are a UI person and/or want to help with the development of tools for models, tools for transparency and for education, please get in touch.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel visualiser\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tools/model-viz/index.html",
    "href": "tools/model-viz/index.html",
    "title": "model visualiser",
    "section": "",
    "text": "Here is a tool to visualise numbers from a calculang model.\nIt’s under construction 🚧. If you are a UI person and/or want to help with the development of tools for models, tools for transparency and for education, please get in touch.\nThis visualiser uses:"
  },
  {
    "objectID": "tools/model-viz/index.html#demo---pensions-calculator-model",
    "href": "tools/model-viz/index.html#demo---pensions-calculator-model",
    "title": "model visualiser",
    "section": "Demo - pensions calculator model",
    "text": "Demo - pensions calculator model\nThis is a demo, using the pensions calculator model. Don’t believe the numbers too much, but it’s interesting to understand the visualisation tool.\n\nlocation1 = \"declann/calculang-miscellaneous-models\";\nsha = \"main\";\nlocation2 = \"/models/pensions/pensions-calculator\"\nmodel = require(`https://cdn.jsdelivr.net/gh/${location1}@${sha}${location2}.js`)\nsource = fetch(`https://cdn.jsdelivr.net/gh/${location1}@${sha}${location2}.cul.js`).then(response => {\n  return response.text();\n});\nintrospection = fetch(`https://cdn.jsdelivr.net/gh/${location1}@${sha}${location2}.introspection.json`).then(response => {\n  return response.json();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// info for the available formulae (not every formula)\nformulae_info = Object.keys(model).map(d => Object.values(introspection.cul_functions).find(e => e.name == d && e.cul_scope_id == 0)).filter(d => d != undefined);\n\n\n\n\n\n\n\nformulae_info_inputs = {\n  var inputs = [];\n  formulae_info.forEach(d => {\n    inputs.push(d.inputs)\n  })\n  return [...new Set(inputs.flat())] //Object.keys(inputs);\n}\n\n\n\n\n\n\n\ninput_domains_config = d3.csvParse(\n`input,min,max,step,default0,default1,step_sens\nage_in,20,70,10,30,60,10\nage_0_in,20,50,5,25,40,5\nannual_salary_0_in,10000,200000,100,50000,100000,30000\nsalary_inflation_rate_in,-0.05,0.10,0.01,0.05,0.04,0.03\nempee_contribution_rate_in,0.00,0.30,0.01,0.05,0.1,0.05\nunit_growth_rate_in,-0.02,0.10,0.01,0.05,0.05,0.02\nretirement_age_in,25,90,1,66,65,5\nfund_value_0_in,0,300000,1000,0,100000,50000\nnum_bars_in,0,20,1,10,10,5\ncontainer_height$_in,0,600,1,500,500,100\ntop_margin$_in,0,20,1,10,10,5\nbottom_margin$_in,0,20,1,10,10,5\ngap$_in,0,20,1,10,10,15\nbar_height$_in,0,50,1,25,25,5\n`, d => ({...d, min:+d.min,max:+d.max,step:+d.step_sens,default:+d.default}))\n\n\n\n\n\n\n\nViz spec UI\n\nviewof viz_spec = {\n\n  const rows = [\"formula\",\"value\",\"field 🔓\",...formulae_info_inputs,\"\"];\n  const cols = [\"x\",\"y\",\"color\",\"row\",\"text\",\"detail\",\"size\", \"field 🔓\"]\n\n  const t = html`<thead><tr><td>field</td><td>min</td><td># steps</td><td>size</td><td>cursor</td><td>type</td><td>format</td>${cols.map(c => `<td>${c}</td>`).join('')}</tr></thead>\n${rows.map(r => `<tr><td>${r}</td>${ r.substr(-3) == '_in' ? `<td><input type=\"text\" style=\"width:30px\" value=\"${input_domains_config.find(e => e.input == r).min /*?? 0*/}\" /></td><td><input type=\"number\" style=\"width:50px\" min=\"0\" max=\"100\" value=\"${(input_domains_config.find(e => e.input == r).max - input_domains_config.find(e => e.input == r).min)/input_domains_config.find(e => e.input == r).step}\" /></td><td><input type=\"text\" style=\"width:30px\" value=\"${input_domains_config.find(e => e.input == r).step}\" /></td><td><input type=\"text\" style=\"width:30px\" value=\"${input_domains_config.find(e => e.input == r).default1}\" id=\"cursor_${r}\" /></td>` : `<td></td><td></td><td></td><td></td>`}<td><select id=\"type_${r}\" style=\"width:40px\"><option value=\"nominal\">N</option><option value=\"ordinal\">O</option><option value=\"quantitative\">Q</option></select></td><td><input type=\"text\" id=\"format_${r}\" style=\"width:30px\" /></td>${cols.map(c => `<td><input type=\"radio\" name=\"${c}\" id=\"${c}_${r}\" value=\"${r}\" ${r == \"\" ? `checked=\"checked\"` : ''}></input></td>`).join('')}</tr>`).join('\\n')}\n<tr><td>independent scale?</td><td></td><td></td><td></td><td></td><td></td><td></td>${cols.map(c => `<td><input type=\"checkbox\" id=\"independent_scale_${c}\" /></td>`).join('')}</tr>\n`\n\n  const el = html`<table>${t}\n</table>`//<thead><tr><td>ff</td></tr></thead><tr><td><input type=\"radio\" name=\"ddd\" value=\"A\">A</input></td></tr><tr><td><input type=\"radio\" name=\"ddd\" value=\"B\" checked=\"checked\">B</input></td></tr></table>`\n\n  let up  = () => {\n    var o = {cursor:{}, independent_scales:{}, types:{},formats:{},encodings:{}};\n    cols.forEach(c => {\n      var s = el.querySelector(`input[name=\"${c}\"]:checked`)\n      o.encodings[c] = s ? s.value : '';\n      s = el.querySelector(`input[id=\"independent_scale_${c}\"]`)\n      o.independent_scales[c] = s.checked\n    })\n    rows.filter(r => r.substr(-3) == \"_in\").forEach(r => {\n      var s  = el.querySelector(`input[id=\"cursor_${r}\"]`);\n      o.cursor[r] = s.value == '' ? undefined : +s.value;\n      //o.types[r] = el.querySelector(`select[id=\"type_${r}\"]`).value\n    })\n    rows.forEach(r => {\n      //var s  = el.querySelector(`input[id=\"cursor_${r}\"]`);\n      //o.cursor[r] = +s.value;\n      o.types[r] = el.querySelector(`select[id=\"type_${r}\"]`).value\n      o.formats[r] = el.querySelector(`input[id=\"format_${r}\"]`).value\n    })\n    //var s = el.querySelector('input[name=\"x\"]:checked')\n    el.value = o//s ? s.value : ''\n    el.dispatchEvent(new Event(\"input\", {bubbles: true}));\n  }\n  //el.on\n\n  el.onchange = up;\n\n  up()\n\n  //el.onload = up;\n//el.querySelector(`input[id=\"x_formula\"]`).checked = true;\n//el.getElementById(\"formula_x\").checked = true;\n//el.dispatchEvent(new Event(\"input\", {bubbles: true}));\n  return el;\n}\n\n\n\n\n\n\n\nDOM.download(new Blob([JSON.stringify(viz_spec)], {type: \"application/json\"}), \"viz_spec\", \"download viz spec\")\n\n\n\n\n\n\nDATA ↓\n\nmapped_inputs = Object.entries(viz_spec.encodings).map(d => d[1]).filter(d => d.substr(-3) == \"_in\")\n\n\n// anything mapped to an enconding should go here\n\ninput_domains_A_overrides = {\n  var o = {}\n  mapped_inputs.forEach(i => {\n    o[i] = domains[i]\n  })\n  return o\n}\n\ninput_domains_A_projection = {\n  var o = {}\n  Object.entries(viz_spec.cursor).forEach(([k,v]) => {\n    o[k] = [v]\n  })\n  Object.entries(input_domains_A_overrides).forEach(([k,v]) => {\n    o[k] = v\n  })\n  //o.formula = Object.values(model)\n  return o\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndomains = {\n  var o = {};\n  for (var i in input_domains_config) {\n    var d = input_domains_config[i];\n    o[d.input] = _.range(d.min, d.max, d.step).map(d => +d.toFixed(2))// input_domains_config[i];\n  };\n  return o\n}\n\n\n\n\n\n\n\ninput_combos_A_projection = cartesianProduct(Object.entries(input_domains_A_projection).map(([k,v]) => ({[k]: v})))\nprojection = formulae_info.filter(d => formulae_info_inputs.indexOf(d.name+'_in') == -1).map(({name}) => input_combos_A_projection.map(combos => ({...combos,/*[pvt_y]: combos[pvt_y],*/ formula:name, /*[name]*/value: +model[name](combos)/*.toFixed(2)*/}))).flat()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n.\n.\n."
  },
  {
    "objectID": "tools/model-viz/index.html#appendix",
    "href": "tools/model-viz/index.html#appendix",
    "title": "model visualiser",
    "section": "Appendix",
    "text": "Appendix\n\nProjection data\n\nInputs.table(projection, {columns: ['formula', 'value', ...(Object.keys((projection[0])).filter(d => d != 'formula' && d != 'value'))]});\n\n\n\n\n\n\n\njson2csv = require(\"json2csv@5.0.7/dist/json2csv.umd.js\")\n\nfunction serialize (data) {\n let parser = new json2csv.Parser();\n let csv = parser.parse(data);\n return new Blob([csv], {type: \"text/csv\"}) \n}\n\nDOM.download(serialize(projection), \"projection\", \"download csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction copy(obj) {\n   var res = {};\n   for (var p in obj) res[p] = obj[p];\n   return res;\n }\n \n\n// https://stackoverflow.com/questions/18957972/cartesian-product-of-objects-in-javascript\nfunction cartesianProduct(input, current) {\n    if (!input || !input.length) { return []; }\n \n    var head = input[0];\n    var tail = input.slice(1);\n    var output = [];\n \n     for (var key in head) {\n       for (var i = 0; i < head[key].length; i++) {\n             var newCurrent = copy(current);         \n             newCurrent[key] = head[key][i];\n             if (tail.length) {\n                  var productOfTail = \n                          cartesianProduct(tail, newCurrent);\n                  output = output.concat(productOfTail);\n             } else output.push(newCurrent);\n        }\n      }    \n     return output;\n }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof viz_spec.querySelector(`input[id=\"y_formula\"]`).checked = true;\n\n\n\n\n\n\n\nviewof viz_spec.querySelector(`input[id=\"color_formula\"]`).checked = true;\n\n\n\n\n\n\n\nviewof viz_spec.querySelector(`input[id=\"text_value\"]`).checked = true;\n\n\n\n\n\n\n\n(viewof viz_spec).dispatchEvent(new Event(\"input\", {bubbles: true}))"
  }
]